-- I just wanted to see how it is to use current API from YueScript (a MoonScript dialect).
-- I consider YueScript to be Lua without boilerplate.
-- I don't use any OOP stuff: class, extends, super, @__class, @__name, @__base, @@, etc.

-- `yue yuemain.yue` `astra run yuemain.lua`

require "globals"
{ :html, :context, :logger, :chain } = require "middleware"

server = Astra.http.server\new()

templates = Astra.new_templating_engine("templates/**/*.html")
templates\context_add("favourite_languages", "Lua, Elixir, C, Rust")
rendered_static_template = templates\render("static/favlangs.html")

favlangs = -> rendered_static_template

tier_list = (req) ->
  q = req\queries()
  for param in *["name", "s", "a", "b", "c", "d", "e", "f"]
    templates\context_add(param, q[param])
  templates\render("dynamic/tier-list.html")

homepage_info = { "I'm a homepage" }

homepage = -> table.concat(homepage_info, "\n")

add_homepage_info = (req, res) ->
  if new_info := req\queries().info
    homepage_info[] = new_info
    return "New info added!"
  "Failed to add new info"

just_hi = (request, response) ->
  if name := request\queries().name
    return "Hello #{name}!"
  "Hello!"

Routes(server)
  base_middleware: chain { context, logger }
  * { GET,         "/",       homepage }
  * { POST,        "/",       add_homepage_info }
  * { GET,         "/hi",     just_hi }
  * { STATIC_FILE, "/main",   "main.lua" }
  * { STATIC_DIR,  "/public", "public" }

Routes(server)
  * { GET, "/favlangs",  html favlangs }
  * { GET, "/tier-list", logger html tier_list }

server\run()

